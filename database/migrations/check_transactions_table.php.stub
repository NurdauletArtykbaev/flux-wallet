<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (Schema::hasTable('transactions')) {
            $this->checkColumns();
        } else {
            Schema::create('transactions', function (Blueprint $table) {
                $table->id();
                $table->foreignId('user_id')->index()->constrained('users')->cascadeOnDelete();
                $table->string('type')->nullable();
                $table->string('provider')->nullable();
                $table->integer('amount')->default(0);
                $table->boolean('is_money')->default(false);
                $table->boolean('is_replenish')->default(false);
                // до транзакции
                $table->integer('money')->default(0);
                $table->integer('bonus')->default(0);
                $table->tinyInteger('status')->default(1);
                $table->string('transaction_id')->nullable();
                $table->text('fields_json')->nullable();
                $table->softDeletes();
                $table->timestamps();
            });
        }
    }

    private function checkColumns()
    {
        if (!Schema::hasColumn('transactions', 'name')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->foreignId('user_id')->index()->constrained('users')->cascadeOnDelete();
            });
        }
        if (!Schema::hasColumn('transactions', 'type')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->string('type')->nullable();
            });
        }
        if (!Schema::hasColumn('transactions', 'provider')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->string('provider')->nullable();
            });
        }
        if (!Schema::hasColumn('transactions', 'amount')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->integer('amount')->default(0);
            });
        }
        if (!Schema::hasColumn('transactions', 'is_money')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->boolean('is_money')->default(false);
            });
        }
        if (!Schema::hasColumn('transactions', 'is_replenish')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->boolean('is_replenish')->default(false);
            });
        }
        if (!Schema::hasColumn('transactions', 'money')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->integer('money')->default(0);
            });
        }
        if (!Schema::hasColumn('transactions', 'bonus')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->integer('bonus')->default(0);
            });
        }
        if (!Schema::hasColumn('transactions', 'status')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->tinyInteger('status')->default(1);
            });
        }
        if (!Schema::hasColumn('transactions', 'transaction_id')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->string('transaction_id')->nullable();
            });
        }

        if (!Schema::hasColumn('transactions', 'fields_json')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->text('fields_json')->nullable();
            });
        }
        if (!Schema::hasColumn('transactions', 'deleted_at')) {
            Schema::table('transactions', function (Blueprint $table) {
                $table->softDeletes();
            });
        }
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('transactions');
    }
};
